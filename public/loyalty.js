const SERVER_URL = 'https://loyalty-9zup.onrender.com/data';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º
let perks = [
  {id: 1, text: "–º–µ—Ä—á Unicorn", color: "perk-red"},
  {id: 2, text: "–≠–∫—Å–∫—É—Ä—Å–∏—è –≤ –æ—Ñ–∏—Å Unicorn", color: "perk-red"},
  {id: 3, text: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å", color: "perk-red"},
  {id: 4, text: "–°—Ç–∏–ª–∏—Å—Ç", color: "perk-red"},
  {id: 5, text: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", color: "perk-red"},
  {id: 6, text: "–ë–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç", color: "perk-yellow"},
  {id: 7, text: "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§", color: "perk-yellow"},
  {id: 8, text: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –î–†", color: "perk-yellow"},
  {id: 9, text: "–ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö", color: "perk-yellow"},
  {id: 10, text: "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É 750 —Ä.", color: "perk-yellow"},
  {id: 11, text: "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É 1000 —Ä.", color: "perk-yellow"},
  {id: 12, text: "–ü—Ä–æ–º–æ–∫–æ–¥ 1000 —Ä.", color: "perk-yellow"},
  {id: 13, text: "–ü—Ä–æ–º–æ–∫–æ–¥ 1500 —Ä.", color: "perk-yellow"},
  {id: 14, text: "–∫—ç—à–±–µ–∫ 50 —Ä—É–±.", color: "perk-gray"},
  {id: 15, text: "–∫—ç—à–±–µ–∫ 150 —Ä—É–±.", color: "perk-gray"},
  {id: 16, text: "–∫—ç—à–±–µ–∫ 200 —Ä—É–±.", color: "perk-gray"},
  {id: 17, text: "–∫—ç—à–±–µ–∫ 300 —Ä—É–±.", color: "perk-gray"},
  {id: 18, text: "–∫—ç—à–±–µ–∫ 400 —Ä—É–±.", color: "perk-gray"}
];

let levelPerks = [
  [14],               // –ë–µ–∑ —É—Ä–æ–≤–Ω—è
  [15, 10],           // –ù–æ–≤–∏—á–æ–∫
  [11, 16],           // –ú–æ–¥–Ω–∏–∫
  [17, 3, 10],        // –®–æ–ø–æ–≥–æ–ª–∏–∫
  [18]                // –§—ç—à–Ω –ö–∏–ª–ª–µ—Ä
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —É—Ä–æ–≤–Ω–µ–π
function initLevelPerks() {
  while (levelPerks.length < 5) {
    levelPerks.push([]);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadFromServer() {
  try {
    const response = await fetch(SERVER_URL);
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    const data = await response.json();
    perks = data.perks;
    levelPerks = data.levelPerks;
    initLevelPerks();
    renderPerksList();
    renderDropzones();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    initLevelPerks();
    renderPerksList();
    renderDropzones();
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveToServer() {
  try {
    await fetch(SERVER_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ perks, levelPerks })
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
function deletePerk(perkId) {
  const perk = perks.find(p => p.id === perkId);
  if (!perk) return;

  if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ "${perk.text}"?\n–û–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π.`)) {
    perks = perks.filter(p => p.id !== perkId);
    levelPerks = levelPerks.map(level => level.filter(id => id !== perkId));
    saveToServer();
    renderPerksList();
    renderDropzones();
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞–±–æ—Ä–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
function renderPerksList() {
  const list = document.getElementById('perks-list');
  list.innerHTML = '';
  perks.forEach(perk => {
    const el = document.createElement('div');
    el.className = `perk ${perk.color}`;
    el.setAttribute('draggable', true);
    el.dataset.id = perk.id;
    el.dataset.source = "perks-list";
    el.innerHTML = `${perk.text} <span class="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">&#9998;</span> <span class="delete" title="–£–¥–∞–ª–∏—Ç—å">üóë</span>`;
    el.addEventListener('dragstart', handleDragStart);
    el.addEventListener('dragend', handleDragEnd);
    el.querySelector('.edit').onclick = (e) => {
      e.stopPropagation();
      openEditPerk(perk.id);
    };
    el.querySelector('.delete').onclick = (e) => {
      e.stopPropagation();
      deletePerk(perk.id);
    };
    list.appendChild(el);
  });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–æ–Ω –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
function renderDropzones() {
  document.querySelectorAll('.dropzone').forEach((zone, idx) => {
    zone.innerHTML = '';
    zone.classList.add('in-dropzone');
    if (!levelPerks[idx]) levelPerks[idx] = [];
    (levelPerks[idx] || []).forEach(perkId => {
      let perk = perks.find(p => p.id === perkId);
      if (!perk) return;
      const el = document.createElement('div');
      el.className = `perk ${perk.color}`;
      el.innerHTML = `${perk.text} <span class="remove" title="–£–±—Ä–∞—Ç—å">√ó</span>`;
      el.dataset.id = perk.id;
      el.dataset.source = "dropzone";
      el.dataset.level = idx;
      el.setAttribute('draggable', true);
      el.querySelector('.remove').onclick = (e) => {
        e.stopPropagation();
        removePerkFromLevel(idx, perk.id);
      };
      el.addEventListener('dragstart', handleDragStart);
      el.addEventListener('dragend', handleDragEnd);
      zone.appendChild(el);
    });
    zone.ondragover = evt => {
      evt.preventDefault();
      zone.classList.add('zone-over');
    };
    zone.ondragleave = () => zone.classList.remove('zone-over');
    zone.ondrop = evt => {
      evt.preventDefault();
      zone.classList.remove('zone-over');
      const perkId = +evt.dataTransfer.getData('perk-id');
      const fromLevel = evt.dataTransfer.getData('levelIdx');

      if (!levelPerks[idx]) levelPerks[idx] = [];

      if (fromLevel && fromLevel !== '' && +fromLevel !== idx) {
        const fromIdx = +fromLevel;
        if (!levelPerks[fromIdx]) levelPerks[fromIdx] = [];
        levelPerks[fromIdx] = levelPerks[fromIdx].filter(id => id !== perkId);
        if (!levelPerks[idx].includes(perkId)) {
          levelPerks[idx].push(perkId);
        }
      } else if (!levelPerks[idx].includes(perkId)) {
        levelPerks[idx].push(perkId);
      }

      saveToServer();
      renderDropzones();
    };
  });
}

// Drag and Drop logic
function handleDragStart(evt) {
  evt.dataTransfer.setData('perk-id', evt.target.dataset.id);
  if (evt.target.dataset.source === "dropzone") {
    evt.dataTransfer.setData('levelIdx', evt.target.dataset.level);
  } else {
    evt.dataTransfer.setData('levelIdx', '');
  }
  evt.target.classList.add('dragging');
}

function handleDragEnd(evt) {
  evt.target.classList.remove('dragging');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —É—Ä–æ–≤–Ω—è
function removePerkFromLevel(levelIdx, perkId) {
  if (!levelPerks[levelIdx]) levelPerks[levelIdx] = [];
  levelPerks[levelIdx] = levelPerks[levelIdx].filter(id => id !== perkId);
  saveToServer();
  renderDropzones();
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
function openEditPerk(id) {
  let perk = perks.find(p => p.id === id);
  if (!perk) return;
  document.getElementById('add-perk-form').style.display = '';
  document.getElementById('perk-text').value = perk.text;
  document.getElementById('perk-color').value = perk.color;
  window._editingPerkId = id;
}

function resetPerkForm() {
  document.getElementById('perk-text').value = '';
  document.getElementById('perk-color').value = 'perk-red';
  window._editingPerkId = null;
  document.getElementById('add-perk-form').style.display = 'none';
}

document.getElementById('add-perk-btn').onclick = () => {
  resetPerkForm();
  document.getElementById('add-perk-form').style.display = '';
};

document.getElementById('cancel-perk-btn').onclick = resetPerkForm;

document.getElementById('save-perk-btn').onclick = function () {
  let text = document.getElementById('perk-text').value.trim();
  let color = document.getElementById('perk-color').value;
  if (!text) return alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!');
  if (window._editingPerkId) {
    let perk = perks.find(p => p.id === window._editingPerkId);
    if (perk) {
      perk.text = text;
      perk.color = color;
    }
  } else {
    let newId = perks.length ? Math.max(...perks.map(p => p.id)) + 1 : 1;
    perks.push({ id: newId, text, color });
  }
  saveToServer();
  resetPerkForm();
  renderPerksList();
  renderDropzones();
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
loadFromServer();
